# -*- coding: utf-8 -*-
"""SK_Profiles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XLfea7iU0hsYN6PG6EWqvneZKQg5d_7-
"""

import pandas as pd

sk = pd.read_excel('/content/Officials from DBP.xlsx', sheet_name = 'BARANGAY_LEVEL')
sample = pd.read_csv('/content/data.csv')

sk

sk = sk.apply(lambda x: x.str.upper() if x.dtype == 'object' else x)

### REMOVE NUMBERS AND SPECIAL CHARACTERS, AND EXTRA SPCAES IN THE COLUMNS OF SK
sk = sk.apply(lambda x: x.str.replace(r'[^a-zA-Z\s]', '', regex=True) if x.dtype == 'object' else x)

sk1 = sk.copy()

sk1.columns

sample.columns

# Ensure 'Name' and 'Gender' columns are available in the sample dataset
sample = sample[['Name', 'Gender']].dropna()
sample['Name'] = sample['Name'].str.lower()

# Combine names into a single column
sk1['FIRSTNAME'] = sk1['FIRSTNAME'].str.lower()

# Extract the relevant column
sk1_names = sk1[['FIRSTNAME']]

from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB

# Initialize the CountVectorizer for character-level n-grams
vectorizer = CountVectorizer(analyzer='char', ngram_range=(2, 4))

# Transform the training names
X = vectorizer.fit_transform(sample['Name'])
y = sample['Gender']

# Split the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train, y_train)

# Evaluate the model
accuracy = model.score(X_test, y_test)
print(f'Accuracy: {accuracy}')

sk1.columns

# Transform the names for prediction, handling NaN values
X_sk1 = vectorizer.transform(sk1_names['FIRSTNAME'].fillna('')) # Replace NaN with empty strings

# Predict genders
predictions = model.predict(X_sk1)

# Add predictions as a new column to the DataFrame
sk1['PREDICTED GENDER'] = predictions  # Assign the predictions to a new column

# Uppercase column names
sk1.columns = [col.upper() for col in sk1.columns]

# Uppercase string values in rows
for col in sk1.columns:
    if sk1[col].dtype == 'object':
        sk1[col] = sk1[col].str.upper()

# Save the results
sk1.to_csv('/content/predicted_genders_sk1.csv', index=False)

# Now you can print the DataFrame with the 'PREDICTED GENDER' column
print(sk1[['FIRSTNAME', 'PREDICTED GENDER']].head())